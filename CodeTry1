#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Oct  8 00:08:35 2022

@author: shubhagautam
"""

import pandas as pd
import urllib.request
import re
import parse
url = 'https://rest.uniprot.org/uniprotkb/P04637.txt'
urllib.request.urlopen('https://rest.uniprot.org/uniprotkb/Q72498.txt')
print(url)

with urllib.request.urlopen('https://rest.uniprot.org/uniprotkb/Q72498.txt') as file:
    file_contents = file.read()
    print(file_contents)
    
# set up regular expressions
# use https://regexper.com to visualise these if required
rx_dict = {
    'DR': re.compile(r'School = (?P<DR>.*)\n'),
    'PE': re.compile(r'Grade = (?P<PE>\d+)\n'),
    'SUPFAM': re.compile(r'(?P<SUPFAM>Name|Score)'),
}

def _parse_line(line):
    """
    Do a regex search against all defined regexes and
    return the key and match result of the first matching regex

    """

    for key, rx in rx_dict.items():
        match = rx.search(line)
        if match:
            return key, match
    # if there are no matches
    return None, None

def parse_file(filepath):
    """
    Parse text at given filepath

    Parameters
    ----------
    filepath : str
        Filepath for file_object to be parsed

    Returns
    -------
    data : pd.DataFrame
        Parsed data

    """

    data = []  # create an empty list to collect the data
    # open the file and read through it line by line
    with open(filepath, 'r') as file_object:
        line = file_object.readline()
        while line:
            # at each line check for a match with a regex
            key, match = _parse_line(line)

            # extract school name
            if key == 'DR':
                school = match.group('DR')

            # extract grade
            if key == 'PE':
                grade = match.group('PE')

            # identify a table header 
            if key == 'SUPFAM':
                # extract type of table, i.e., Name or Score
                value_type = match.group('SUPFAM')
                line = file_object.readline()
                # read each line of the table until a blank line
                while line.strip():
                    # extract number and value
                    number, value = line.strip().split(',')
                    value = value.strip()
                    # create a dictionary containing this row of data
                    row = {
                        'DR': school,
                        'PE': grade,
                        'SUPFAM': number,
                        value_type: value
                    }
                    # append the dictionary to the data list
                    data.append(row)
                    line = file_object.readline()

            line = file_object.readline()

        # create a pandas DataFrame from the list of dicts
        data = pd.DataFrame(data)
        # set the School, Grade, and Student number as the index
        data.set_index(['DR', 'PE', 'SUPFAM'], inplace=True)
        # consolidate df to remove nans
        data = data.groupby(level=data.index.names).first()
        # upgrade Score from float to integer
        data = data.apply(pd.to_numeric, errors='ignore')
    return data

import os


data_2 = urllib.request.urlopen('https://rest.uniprot.org/uniprotkb/Q72498.txt')
for line in data_2:
    print(line)
for line in data_2:
    if 'SUPFAM;' in line:
        superfam_line = line
        print(superfam_line)
        
with data_2 as fp:
    # read all lines using readline()
    lines = fp.readlines()
    for row in lines:
        # check if string present on a current line
        word = 'SUPERFAM'
#         print(row.find(word))
        # find() method returns -1 if the value is not found,
        # if found it return 0
        if row.find(word) == 0:
            print('string exists in file')
            print('line Number:', lines.index(line))
